sandML <- solve(aML)%*%bML%*%solve(aML)
quasiML <- solve(aML)
sqrt(diag(sandML))
sqrt(diag(quasiML))
mlCov <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
# R <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
# G <- getVarCov(ml)
mlCov <- R + Z%*%G%*%t(Z)
Wml <- solve(mlCov)
aML <- t(X)%*%Wml%*%X
bML <- t(X)%*%Wml%*%(diag(N) * residuals(ml)%*%t(residuals(ml)))%*%Wml%*%X
sandML <- solve(aML)%*%bML%*%solve(aML)
quasiML <- solve(aML)
sqrt(diag(sandML))
sqrt(diag(quasiML))
head(block)
block <- mlCov/mlCov
head(block)
block[1:5, 1:5]
block[1:10, 1:10]
lol <- mlCov / (mlCov + 0.0001)
lol[1:10, 1:10]
mlCov[1:10, 1:10]
?bdiag
varcov(creat, ml, 1, 'marginal')
bdiag(lapply(1:2, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
bdiag(lapply(1:3, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
bdiag(lapply(1:3, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal'))) + 0.00001
lol <- mlCov / (mlCov + 0.0001)
bdiag(lapply(1:3, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))/(bdiag(lapply(1:3, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal'))) + 0.00001)
mlCov <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
mlCov[1:10,1:10]
mlCov[1:10,1:10]/mlCov[1:10,1:10]
lol <- mlCov[1:10,1:10]/mlCov[1:10,1:10]
lol[is.na(lol)] <- 0
lol
mlCov <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
block <- mlCov/mlCov
block[is.na(block)] <- 0
block[1:10, 1:10]
# mlCov <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
# block <- mlCov/mlCov
R <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
block <- R/R
block[is.na(block)] <- 0
G <- getVarCov(ml)
mlCov <- R + block * (Z%*%G%*%t(Z))
Wml <- solve(mlCov)
aML <- t(X)%*%Wml%*%X
bML <- t(X)%*%Wml%*%(diag(N) * residuals(ml)%*%t(residuals(ml)))%*%Wml%*%X
sandML <- solve(aML)%*%bML%*%solve(aML)
quasiML <- solve(aML)
sqrt(diag(sandML))
sqrt(diag(quasiML))
sqrt(diag(sandML))/sqrt(diag(quasiML))
sqrt(diag(quasiML))
sqrt(diag(sandML))
cat('Rate of change without KD:', reml$coefficients$fixed[2],
' Standard Error:', sqrt(sandREML[2,2]))
cat('Rate of change with KD:', reml$coefficients$fixed[2] + reml$coefficients$fixed[4],
' Standard Error:', sqrt(sandREML[2,2] + sandREML[2,4] + sandREML[4,2] + sandREML[4,4]))
# remlCov <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = reml,
#                                                 individuals = i, type = 'marginal')))
Rreml <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = reml, individuals = i, type = 'marginal')))
Greml <- getVarCov(reml)
remlCov <- Rreml + block * (Z%*%Greml%*%t(Z))
Wreml <- solve(remlCov)
aREML <- t(X)%*%Wreml%*%X
bREML <- t(X)%*%Wreml%*%(diag(N) * residuals(reml)%*%t(residuals(reml)))%*%Wreml%*%X
sandREML <- solve(aREML)%*%bREML%*%solve(aREML)
quasiREML <- solve(aREML)
sqrt(diag(quasiREML))
sqrt(diag(sandREML))
## e)
cat('Rate of change without KD:', reml$coefficients$fixed[2],
' Standard Error:', sqrt(sandREML[2,2]))
cat('Rate of change with KD:', reml$coefficients$fixed[2] + reml$coefficients$fixed[4],
' Standard Error:', sqrt(sandREML[2,2] + sandREML[2,4] + sandREML[4,2] + sandREML[4,4]))
sandREML[2,4]
sandREML[2,2]
sandREML[4,4]
summary(reml)
cat('Prediction for 20th subject (includes random effects):', predict(reml)[20])
cat('Preciction for a subject similar to 20th, average out random effects',
sum(reml$coefficients$fixed * X[20,]))
summary(ml)
nNug <- lme(fixed=scr ~ age*kd, method="REML",
random=reStruct(~ 1 + age | id, pdClass="pdDiag"),
correlation=corSpher(form=~ age | id, nugget=FALSE),
data = creat)
summary(nNug)
summary(reml)
warnings()
summary(nNug)
summary(reml)
summary(remlID)
summary(remlSym)
lmID <- lm(distance ~ I(age-8)*Sex, data=Orthodont)
summary(lmID)
remlID <- gls(distance ~ I(age-8)*Sex, method="REML",
corr=varIdent(form=~1)
data=Orthodont)
lmID <- lm(distance ~ I(age-8)*Sex, data=Orthodont)
remlSym <- gls(distance ~ I(age-8)*Sex, method="REML",
corr=corCompSymm(form = ~1 | Subject),
data=Orthodont)
## a)
X <- as.matrix(cbind(numeric(dim(Orthodont)[1]) + 1, Orthodont$age, Orthodont$Sex, Orthodont$inter))
X[,3] <- X[,3] - 1
idC <- idCov(m, remlID$sigma^2)
Wid <- solve(kronecker(diag(n), idC))
aID <- t(X)%*%Wid%*%X
bID <- t(X)%*%Wid%*%(diag(n*m) * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
sandID <- solve(aID)%*%bID%*%solve(aID)
sqrt(diag(sandID))
exchCov <- function(m, rho, sigma2) {
r <- matrix(rho, ncol = m, nrow = m)
return(as.matrix(sigma2 * (diag(m) * (1 - rho) + r)))
}
idCov <- function(m, sigma2) diag(m) * sigma2
# gls
# remlID <- gls(distance ~ I(age-8)*Sex, method="REML",
#               data=Orthodont)
remlID <- gls(distance ~ I(age-8)*Sex, method="REML",
corr=varIdent(form=~1)
data=Orthodont)
lmID <- lm(distance ~ I(age-8)*Sex, data=Orthodont)
remlSym <- gls(distance ~ I(age-8)*Sex, method="REML",
corr=corCompSymm(form = ~1 | Subject),
data=Orthodont)
## a)
X <- as.matrix(cbind(numeric(dim(Orthodont)[1]) + 1, Orthodont$age, Orthodont$Sex, Orthodont$inter))
X[,3] <- X[,3] - 1
idC <- idCov(m, remlID$sigma^2)
Wid <- solve(kronecker(diag(n), idC))
aID <- t(X)%*%Wid%*%X
bID <- t(X)%*%Wid%*%(diag(n*m) * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
sandID <- solve(aID)%*%bID%*%solve(aID)
sqrt(diag(sandID))
remlID <- gls(distance ~ I(age-8)*Sex, method="REML",
corr=varIdent(form=~1),
data=Orthodont)
X <- as.matrix(cbind(numeric(dim(Orthodont)[1]) + 1, Orthodont$age, Orthodont$Sex, Orthodont$inter))
X[,3] <- X[,3] - 1
idC <- idCov(m, remlID$sigma^2)
Wid <- solve(kronecker(diag(n), idC))
aID <- t(X)%*%Wid%*%X
bID <- t(X)%*%Wid%*%(diag(n*m) * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
sandID <- solve(aID)%*%bID%*%solve(aID)
sqrt(diag(sandID))
summary(remlID)
remlID$sigma
idC <- idCov(m, remlID$sigma^2)
Wid <- solve(kronecker(diag(n), idC))
aID <- t(X)%*%Wid%*%X
Wid
# 1
data(Orthodont)
wide <- reshape(Orthodont,direction="wide",idvar= c("Subject","Sex"),timevar="age")
colnames(wide) <- c('Subject', 'Sex', '8', '10', '12', '14')
n <- length(unique(Orthodont$Subject))
m <- dim(Orthodont)[1]/n
Orthodont$inter <- Orthodont$age * (Orthodont$Sex == 'Female')
# lme
# including interaction effect automatically includes individual effects
# sym.reml1 <- lme(fixed=distance ~ I(age-8)*Sex, method="REML",
#                  random=reStruct(~ 1+I(age-8) | Subject, pdClass="pdSymm"), data=Orthodont)
exchCov <- function(m, rho, sigma2) {
r <- matrix(rho, ncol = m, nrow = m)
return(as.matrix(sigma2 * (diag(m) * (1 - rho) + r)))
}
idCov <- function(m, sigma2) diag(m) * sigma2
# gls
# remlID <- gls(distance ~ I(age-8)*Sex, method="REML",
#               data=Orthodont)
remlID <- gls(distance ~ I(age-8)*Sex, method="REML",
corr=varIdent(form=~1),
data=Orthodont)
lmID <- lm(distance ~ I(age-8)*Sex, data=Orthodont)
remlSym <- gls(distance ~ I(age-8)*Sex, method="REML",
corr=corCompSymm(form = ~1 | Subject),
data=Orthodont)
## a)
X <- as.matrix(cbind(numeric(dim(Orthodont)[1]) + 1, Orthodont$age, Orthodont$Sex, Orthodont$inter))
X[,3] <- X[,3] - 1
idC <- idCov(m, remlID$sigma^2)
Wid <- solve(kronecker(diag(n), idC))
aID <- t(X)%*%Wid%*%X
bID <- t(X)%*%Wid%*%(diag(n*m) * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
sandID <- solve(aID)%*%bID%*%solve(aID)
sqrt(diag(sandID))
summary(remlID)
head(wide)
# Sheridan Grant
# STAT 571 HW 5
# Package Handling (you read the comments; I reward you with a shitty pun)
packages <- c('nlme', 'dplyr', 'reshape2', 'Matrix')
installed <- rownames(installed.packages())
for (i in length(packages)) {
if ((packages[i] %in% installed) == FALSE) {
install.packages(packages[i])
}
}
lapply(packages, require, character.only = TRUE)
# 1
data(Orthodont)
wide <- reshape(Orthodont,direction="wide",idvar= c("Subject","Sex"),timevar="age")
colnames(wide) <- c('Subject', 'Sex', '8', '10', '12', '14')
n <- length(unique(Orthodont$Subject))
m <- dim(Orthodont)[1]/n
Orthodont$inter <- Orthodont$age * (Orthodont$Sex == 'Female')
# lme
# including interaction effect automatically includes individual effects
# sym.reml1 <- lme(fixed=distance ~ I(age-8)*Sex, method="REML",
#                  random=reStruct(~ 1+I(age-8) | Subject, pdClass="pdSymm"), data=Orthodont)
exchCov <- function(m, rho, sigma2) {
r <- matrix(rho, ncol = m, nrow = m)
return(as.matrix(sigma2 * (diag(m) * (1 - rho) + r)))
}
idCov <- function(m, sigma2) diag(m) * sigma2
# gls
# remlID <- gls(distance ~ I(age-8)*Sex, method="REML",
#               data=Orthodont)
remlID <- gls(distance ~ I(age-8)*Sex, method="REML",
corr=varIdent(form=~1),
data=Orthodont)
lmID <- lm(distance ~ I(age-8)*Sex, data=Orthodont)
remlSym <- gls(distance ~ I(age-8)*Sex, method="REML",
corr=corCompSymm(form = ~1 | Subject),
data=Orthodont)
## a)
X <- as.matrix(cbind(numeric(dim(Orthodont)[1]) + 1, Orthodont$age, Orthodont$Sex, Orthodont$inter))
X[,3] <- X[,3] - 1
idC <- idCov(m, remlID$sigma^2)
Wid <- solve(kronecker(diag(n), idC))
aID <- t(X)%*%Wid%*%X
bID <- t(X)%*%Wid%*%(diag(n*m) * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
sandID <- solve(aID)%*%bID%*%solve(aID)
sqrt(diag(sandID))
symCov <- getVarCov(remlSym)
Wsym <- solve(kronecker(diag(n), symCov))
aSym <- t(X)%*%Wsym%*%X
block <- kronecker(diag(n), matrix(1, nrow = m, ncol = m))
bSym <- t(X)%*%Wsym%*%(block*residuals(remlSym)%*%t(residuals(remlSym)))%*%Wsym%*%X
sandSym <- solve(aSym)%*%bSym%*%solve(aSym)
sqrt(diag(sandSym))
## b)
sampler <- function(covar) {
samp <- sample_n(wide, n, replace = TRUE)
long <- melt(samp, id.vars = c("Subject", "Sex"), variable.name = "age", value.name = "distance")
long$age <- as.numeric(as.character(long$age))
long$inter <- long$age * (long$Sex == 'Female')
if (covar == 'ID') {
return(gls(distance ~ I(age-8)*Sex, method="REML",
corr=varIdent(form=~1), data=long)$coefficients[4])
} else if (covar == 'Sym') {
return(gls(distance ~ I(age-8)*Sex, method="REML",
corr=corCompSymm(form = ~1 | Subject), data=long)$coefficients[4])
}
}
reps <- 10000
betasID <- replicate(reps, sampler('ID'))
Wid[1:10, 1:10]
mean(betasID)
sqrt(var(betasID))
diag(4)
diag(n*m) * residuals(remlID)%*%t(residuals(remlID))
idC <- idCov(m, remlID$sigma^2)
Wid <- solve(kronecker(diag(n), idC))
aID <- t(X)%*%Wid%*%X
# bID <- t(X)%*%Wid%*%(diag(n*m) * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
bID <- t(X)%*%Wid%*%(block * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
sandID <- solve(aID)%*%bID%*%solve(aID)
sqrt(diag(sandID))
sqrt(var(betasID))
sqrt(diag(sandSym))
symCov
aID
aSym
bID
bSym
sandSym
sandID
Wsym
head(Wsym)
sqrt(var(betasID))
sqrt(var(betasSym))
betasSym <-  replicate(reps, sampler('Sym'))
head(X)
summary(remlID)
head(Orthodont)
sqrt(var(betasID))
sqrt(var(betasSym))
## c)
sampler2 <- function() {
samp <- sample_n(Orthodont, n*m, replace = TRUE)
return(gls(distance ~ I(age-8)*Sex, method="REML", data=samp)$coefficients[4])
}
betasID2 <- replicate(reps, sampler2())
sqrt(var(betasID2))
idC <- idCov(m, remlID$sigma^2)
Wid <- solve(kronecker(diag(n), idC))
aID <- t(X)%*%Wid%*%X
bID <- t(X)%*%Wid%*%(diag(n*m) * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
# bID <- t(X)%*%Wid%*%(block * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
sandID <- solve(aID)%*%bID%*%solve(aID)
sqrt(diag(sandID))
remlID$sigma
remlSym$sigma
sampler3 <- function() {
clusters <- t(replicate(m,sample(1:n, n, TRUE)))
obs <- replicate(n, sample(1:m, m, TRUE))
rowSamps <- c((clusters - 1) * m + obs)
long <- Orthodont[rowSamps,]
return(gls(distance ~ I(age-8)*Sex, method="REML", data=long)$coefficients[4])
}
betasID3 <- replicate(reps, sampler3())
idC <- idCov(m, remlID$sigma^2)
Wid <- solve(kronecker(diag(n), idC))
aID <- t(X)%*%Wid%*%X
# bID <- t(X)%*%Wid%*%(diag(n*m) * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
bID <- t(X)%*%Wid%*%(block * residuals(remlID)%*%t(residuals(remlID)))%*%Wid%*%X
sandID <- solve(aID)%*%bID%*%solve(aID)
sqrt(diag(sandID))
sqrt(diag(sandSym))
sqrt(var(betasID2))
sqrt(var(betasID3))
## c)
sampler2 <- function() {
samp <- sample_n(Orthodont, n*m, replace = TRUE)
return(gls(distance ~ I(age-8)*Sex,
corr=varIdent(form=~1), method="REML", data=samp)$coefficients[4])
}
betasID2 <- replicate(reps, sampler2())
clusters <- t(replicate(m,sample(1:n, n, TRUE)))
clusters
obs <- replicate(n, sample(1:m, m, TRUE))
obs
sampler3 <- function() {
clustersSmall <- sample(1:n, n, TRUE)
clusters <- t(replicate(m,clustersSmall))
obs <- replicate(n, sample(1:m, m, TRUE))
rowSamps <- c((clusters - 1) * m + obs)
long <- Orthodont[rowSamps,]
return(gls(distance ~ I(age-8)*Sex,
corr=varIdent(form=~1), method="REML", data=long)$coefficients[4])
}
betasID3 <- replicate(reps, sampler3())
sqrt(var(betasID3))
clustersSmall <- sample(1:n, n, TRUE)
clustersSmall
clusters <- t(replicate(m,clustersSmall))
clusters
obs <- replicate(n, sample(1:m, m, TRUE))
obs
rowSamps <- c((clusters - 1) * m + obs)
rowSamps
lmID <- lm(distance ~ I(age-8)*Sex, data=Orthodont)
summary(lmID)
summary(remlID)
obs <- replicate(n, 1:4)
obs
sampler3 <- function() {
clustersSmall <- sample(1:n, n, TRUE)
clusters <- t(replicate(m,clustersSmall))
# obs <- replicate(n, sample(1:m, m, TRUE))
obs <- replicate(n, 1:4)
rowSamps <- c((clusters - 1) * m + obs)
long <- Orthodont[rowSamps,]
return(gls(distance ~ I(age-8)*Sex,
corr=varIdent(form=~1), method="REML", data=long)$coefficients[4])
}
betasID3 <- replicate(reps, sampler3())
sqrt(var(betasID3))
sampler3 <- function() {
clustersSmall <- sample(1:n, n, TRUE)
clusters <- t(replicate(m,clustersSmall))
obs <- replicate(n, sample(1:m, m, TRUE))
# obs <- replicate(n, 1:4)
rowSamps <- c((clusters - 1) * m + obs)
long <- Orthodont[rowSamps,]
return(gls(distance ~ I(age-8)*Sex,
corr=varIdent(form=~1), method="REML", data=long)$coefficients[4])
}
betasID3 <- replicate(reps, sampler3())
sqrt(var(betasID3))
remlID$sigma
remlID$sigma^2 / 4
summary(reml)
Rml <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
block <- Rml/Rml
block[is.na(block)] <- 0
Gml <- getVarCov(ml)
mlCov <- Rml + block * (Z%*%Gml%*%t(Z))
Wml <- solve(mlCov)
aML <- t(X)%*%Wml%*%X
# bML <- t(X)%*%Wml%*%(diag(N) * residuals(ml)%*%t(residuals(ml)))%*%Wml%*%X
bML <- t(X)%*%Wml%*%(block * residuals(ml)%*%t(residuals(ml)))%*%Wml%*%X
sandML <- solve(aML)%*%bML%*%solve(aML)
quasiML <- solve(aML)
sqrt(diag(quasiML))
sqrt(diag(sandML))
dim(block)
# 2
## c)
creat <- read.csv('creatine.csv')
creat <- na.omit(creat)
n <- length(unique(creat$id))
N <- length(creat$id)
creat$kd <- (creat$group <=2)
creat$hyp <- (creat$group %% 2 == 1)
X <- cbind(numeric(N) + 1, creat$age, as.numeric(creat$kd))
X <- cbind(X, X[,2] * X[,3])
Z <- X[,1:2]
ml <- lme(fixed=scr ~ age*kd, method="ML",
random=reStruct(~ 1 + age | id, pdClass="pdDiag"),
correlation=corSpher(form=~ age | id, nugget=TRUE),
data = creat)
reml <- lme(fixed=scr ~ age*kd, method="REML",
random=reStruct(~ 1 + age | id, pdClass="pdDiag"),
correlation=corSpher(form=~ age | id, nugget=TRUE),
data = creat)
nNug <- lme(fixed=scr ~ age*kd, method="REML",
random=reStruct(~ 1 + age | id, pdClass="pdDiag"),
correlation=corSpher(form=~ age | id, nugget=FALSE),
data = creat)
## d)
varcov <- function(data, obj, individuals, type) {
if (sum(data$id == individuals) == 1) {
return(obj$sigma^2)
} else {
return(getVarCov(obj, individuals, type)[[1]])
}
}
# mlCov <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
# block <- mlCov/mlCov
Rml <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = ml, individuals = i, type = 'marginal')))
block <- Rml/Rml
block[is.na(block)] <- 0
Gml <- getVarCov(ml)
mlCov <- Rml + block * (Z%*%Gml%*%t(Z))
Wml <- solve(mlCov)
aML <- t(X)%*%Wml%*%X
# bML <- t(X)%*%Wml%*%(diag(N) * residuals(ml)%*%t(residuals(ml)))%*%Wml%*%X
bML <- t(X)%*%Wml%*%(block * residuals(ml)%*%t(residuals(ml)))%*%Wml%*%X
sandML <- solve(aML)%*%bML%*%solve(aML)
quasiML <- solve(aML)
sqrt(diag(quasiML))
sqrt(diag(sandML))
block[1:10, 1:10]
(reisduals(ml)%*%t(residuals(ml)))[1:10, 1:10]
(residuals(ml)%*%t(residuals(ml)))[1:10, 1:10]
(block *residuals(ml)%*%t(residuals(ml)))[1:10, 1:10]
mlCov[1:10, 1:10]
#                                                 individuals = i, type = 'marginal')))
Rreml <- bdiag(lapply(1:n, function(i) varcov(data = creat, obj = reml, individuals = i, type = 'marginal')))
Greml <- getVarCov(reml)
remlCov <- Rreml + block * (Z%*%Greml%*%t(Z))
Wreml <- solve(remlCov)
aREML <- t(X)%*%Wreml%*%X
bREML <- t(X)%*%Wreml%*%(diag(N) * residuals(reml)%*%t(residuals(reml)))%*%Wreml%*%X
bREML <- t(X)%*%Wreml%*%(block * residuals(reml)%*%t(residuals(reml)))%*%Wreml%*%X
sandREML <- solve(aREML)%*%bREML%*%solve(aREML)
quasiREML <- solve(aREML)
sqrt(diag(quasiREML))
sqrt(diag(sandREML))
summary(reml)
getVarCov(remlID)
dim(Wsym)
Wsym[1:10,1:10]
summary(reml)
sqrt(diag(quasiREML))
sqrt(diag(sandREML))
summary(ml)
ml$coefficients$random
summary(ml)$coef
summary(ml)
summary(ml)$ran
0.2115858^2
summary(reml)
0.2117686^2
summary(ml)
summary(reml)
summary(ml)
sqrt(diag(quasiML))
sqrt(diag(sandML))
summary(reml)
sqrt(diag(quasiREML))
sqrt(diag(sandREML))
cat('Rate of change without KD:', reml$coefficients$fixed[2],
' Standard Error:', sqrt(sandREML[2,2]))
cat('Rate of change with KD:', reml$coefficients$fixed[2] + reml$coefficients$fixed[4],
' Standard Error:', sqrt(sandREML[2,2] + sandREML[2,4] + sandREML[4,2] + sandREML[4,4]))
cat('Prediction for 20th subject (includes random effects):', predict(reml)[20])
cat('Preciction for a subject similar to 20th, average out random effects',
sum(reml$coefficients$fixed * X[20,]))
library('rstan')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
setwd("~/Desktop/Code/UW/stat-564-2017/stan-practice")
fit <- stan(file = '8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
fit <- stan(file = '8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
plot(fit)
print(fit)
model <- stan_demo()
