if ((packages[i] %in% installed) == FALSE) {
install.packages(packages[i])
}
}
lapply(packages, require, character.only = TRUE)
n <- 91
m <- 3
x1 <- 1 + 0.1 * (1:91 - 1)
deltas <- (1 + (10 - x1)/10)^2
X <- cbind(x1, x1 + deltas, x1 + 2*deltas)
n <- 91
m <- 3
x1 <- 1 + 0.1 * (1:91 - 1)
deltas <- (1 + (10 - x1)/10)^2
X <- cbind(x1, x1 + deltas, x1 + 2*deltas)
X
deltas
x1
X <- as.data.frame(cbind(x1, x1 + deltas, x1 + 2*deltas))
head(X)
?melt
packages <- c('reshape2')
installed <- rownames(installed.packages())
for (i in length(packages)) {
if ((packages[i] %in% installed) == FALSE) {
install.packages(packages[i])
}
}
lapply(packages, require, character.only = TRUE)
melt(X)
rep(X[,1], 3)
long <- as.data.frame(cbind(rep(X[,1], 3), melt(X)))
head(long)
n <- 91
m <- 3
x1 <- 1 + 0.1 * (1:n - 1)
deltas <- (1 + (10 - x1)/10)^2
X <- as.data.frame(cbind(x1, x1 + deltas, x1 + 2*deltas, 1:n))
X
melt(X)
?melt
melt(X, id.vars = 'V4')
long <- as.data.frame(cbind(rep(X[,1], 3), melt(X, id.vars = 'V4')))
long
long <- cbind(long[,2], long[,1], long[,4])
long
colnames(long) <- c('subj', 'x1', 'xj')
n <- 91
m <- 3
x1 <- 1 + 0.1 * (1:n - 1)
deltas <- (1 + (10 - x1)/10)^2
X <- as.data.frame(cbind(x1, x1 + deltas, x1 + 2*deltas, 1:n))
long <- as.data.frame(cbind(rep(X[,1], 3), melt(X, id.vars = 'V4')))
long <- cbind(long[,2], long[,1], long[,4])
colnames(long) <- c('subj', 'x1', 'xj')
betaL <- 1
f <- function(x) (10 - x)^2
sigma2 <- 100
gen <- function(X, f, betaL, sigma2) {
return(f(long$x1) + betaL * (long$xj - long$x1) + rnorm(n*m, 0, sqrt(sigma2)))
}
gen(long, f, betaL, sigma2)
long
long$subj
long <- as.data.frame(cbind(long[,2], long[,1], long[,4]))
n <- 91
m <- 3
x1 <- 1 + 0.1 * (1:n - 1)
deltas <- (1 + (10 - x1)/10)^2
X <- as.data.frame(cbind(x1, x1 + deltas, x1 + 2*deltas, 1:n))
long <- as.data.frame(cbind(rep(X[,1], 3), melt(X, id.vars = 'V4')))
long <- as.data.frame(cbind(long[,2], long[,1], long[,4]))
colnames(long) <- c('subj', 'x1', 'xj')
betaL <- 1
f <- function(x) (10 - x)^2
sigma2 <- 100
gen <- function(X, f, betaL, sigma2) {
return(f(long$x1) + betaL * (long$xj - long$x1) + rnorm(n*m, 0, sqrt(sigma2)))
}
gen(long, f, betaL, sigma2)
Y <- gen(long, f, betaL, sigma2)
plot(long$xj, Y, col = long$subj)
plot(long$xj, Y, col = long$subj, type = 'b')
?plot
Y <- gen(long, f, betaL, 0)
plot(long$xj, Y, col = long$subj)
Y <- gen(long, f, betaL, 1)
plot(long$xj, Y, col = long$subj)
Y <- gen(long, f, betaL, 5)
plot(long$xj, Y, col = long$subj)
Y <- gen(long, f, betaL, 10)
plot(long$xj, Y, col = long$subj)
fixed <- lm(Y ~ as.factor(long$subj) + I(long$xj - long$x1) - 1)
fixed
summary(long)
summary(fixed)
lines(fixed)
plot(fixed)
packages <- c('reshape2', 'nlme')
installed <- rownames(installed.packages())
for (i in length(packages)) {
if ((packages[i] %in% installed) == FALSE) {
install.packages(packages[i])
}
}
lapply(packages, require, character.only = TRUE)
random <- lme(fixed = Y ~ I(long$xj - long$x1), method = 'REML',
random = reStruct(~1|long$subj, pdClass = 'pdDiag'))
fixed <- lm(Y ~ as.factor(long$subj) + I(long$xj - long$x1) - 1, method = 'REML')
fixed <- lm(Y ~ as.factor(long$subj) + I(long$xj - long$x1) - 1)
random <- lme(fixed = Y ~ I(long$xj - long$x1), method = 'REML',
random = reStruct(~1|long$subj, pdClass = 'pdDiag'))
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
random = reStruct(~1|subj, pdClass = 'pdDiag'))
summary(random)
fixed$coefficients
fixed <- lm(Y ~ I(xj - x1) + as.factor(subj) - 1, data = long)
fixed$coefficients
random$coefficients
fixedBetas <- replicate(reps, fixedRep)
reps <- 1000
fixedBetas <- replicate(reps, fixedRep)
# (c)
reps <- 1000
fixed <- lm(Y ~ I(xj - x1) + as.factor(subj) - 1, data = long)
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
random = reStruct(~1|subj, pdClass = 'pdDiag'))
fixedRep <- function() {
Y <- gen(long, f, betaL, sigma2)
fixed <- lm(Y ~ I(xj - x1) + as.factor(subj) - 1, data = long)
return(fixed$coefficients[1])
}
randomRep <- function() {
Y <- gen(long, f, betaL, sigma2)
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
random = reStruct(~1|subj, pdClass = 'pdDiag'))
return(random$coefficients[2])
}
fixedBetas <- replicate(reps, fixedRep)
# Sheridan Grant
# STAT 571 HW 6
# Package Handling (you read the comments; I reward you with a shitty pun)
packages <- c('reshape2', 'nlme')
installed <- rownames(installed.packages())
for (i in length(packages)) {
if ((packages[i] %in% installed) == FALSE) {
install.packages(packages[i])
}
}
lapply(packages, require, character.only = TRUE)
n <- 91
m <- 3
x1 <- 1 + 0.1 * (1:n - 1)
deltas <- (1 + (10 - x1)/10)^2
X <- as.data.frame(cbind(x1, x1 + deltas, x1 + 2*deltas, 1:n))
long <- as.data.frame(cbind(rep(X[,1], 3), melt(X, id.vars = 'V4')))
long <- as.data.frame(cbind(long[,2], long[,1], long[,4]))
colnames(long) <- c('subj', 'x1', 'xj')
betaL <- 1
f <- function(x) (10 - x)^2
sigma2 <- 100
gen <- function(long, f, betaL, sigma2) {
return(f(long$x1) + betaL * (long$xj - long$x1) + rnorm(n*m, 0, sqrt(sigma2)))
}
# (a)
Y <- gen(long, f, betaL, sigma2)
# Y <- gen(long, f, betaL, 0)
plot(long$xj, Y, col = long$subj)
# (c)
reps <- 1000
fixed <- lm(Y ~ I(xj - x1) + as.factor(subj) - 1, data = long)
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
random = reStruct(~1|subj, pdClass = 'pdDiag'))
fixedRep <- function() {
Y <- gen(long, f, betaL, sigma2)
fixed <- lm(Y ~ I(xj - x1) + as.factor(subj) - 1, data = long)
return(fixed$coefficients[1])
}
randomRep <- function() {
Y <- gen(long, f, betaL, sigma2)
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
random = reStruct(~1|subj, pdClass = 'pdDiag'))
return(random$coefficients[2])
}
fixedBetas <- replicate(reps, fixedRep)
randomBetas <- replicate(reps, randomRep)
hist(fixedBetas)
fixedBetas
fixedBetas <- replicate(reps, fixedRep())
randomBetas <- replicate(reps, randomRep())
hist(fixedBetas)
hist(randomBetas)
randomBetas
randomRep()
randomRep <- function() {
Y <- gen(long, f, betaL, sigma2)
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
random = reStruct(~1|subj, pdClass = 'pdDiag'))
return(random$coefficients$fixed[2])
}
randomBetas <- replicate(reps, randomRep())
hist(randomBetas)
randomBetas
sigma2
summary(random)
# Sheridan Grant
# STAT 571 HW 6
# Package Handling (you read the comments; I reward you with a shitty pun)
packages <- c('reshape2', 'nlme')
installed <- rownames(installed.packages())
for (i in length(packages)) {
if ((packages[i] %in% installed) == FALSE) {
install.packages(packages[i])
}
}
lapply(packages, require, character.only = TRUE)
n <- 91
m <- 3
x1 <- 1 + 0.1 * (1:n - 1)
deltas <- (1 + (10 - x1)/10)^2
X <- as.data.frame(cbind(x1, x1 + deltas, x1 + 2*deltas, 1:n))
long <- as.data.frame(cbind(rep(X[,1], 3), melt(X, id.vars = 'V4')))
long <- as.data.frame(cbind(long[,2], long[,1], long[,4]))
colnames(long) <- c('subj', 'x1', 'xj')
betaL <- 1
f <- function(x) (10 - x)^2
sigma2 <- 100
gen <- function(long, f, betaL, sigma2) {
return(f(long$x1) + betaL * (long$xj - long$x1) + rnorm(n*m, 0, sqrt(sigma2)))
}
# (a)
Y <- gen(long, f, betaL, sigma2)
# Y <- gen(long, f, betaL, 0)
plot(long$xj, Y, col = long$subj)
# (c)
reps <- 1000
fixed <- lm(Y ~ I(xj - x1) + as.factor(subj) - 1, data = long)
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
random = reStruct(~1|subj, pdClass = 'pdDiag'))
fixedRep <- function() {
Y <- gen(long, f, betaL, sigma2)
fixed <- lm(Y ~ I(xj - x1) + as.factor(subj) - 1, data = long)
return(fixed$coefficients[1])
}
randomRep <- function() {
Y <- gen(long, f, betaL, sigma2)
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
random = reStruct(~1|subj, pdClass = 'pdDiag'))
return(random$coefficients$fixed[2])
}
fixedBetas <- replicate(reps, fixedRep())
randomBetas <- replicate(reps, randomRep())
hist(fixedBetas)
hist(randomBetas)
randomRep <- function() {
Y <- gen(long, f, betaL, sigma2)
# random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
#               random = reStruct(~1|subj, pdClass = 'pdDiag'))
random <- lme(fixed = Y ~ I(long$xj - long$x1), method = 'REML',
random = reStruct(~1|long$subj, pdClass = 'pdDiag'))
return(random$coefficients$fixed[2])
}
randomRep()
randomRep <- function(long) {
Y <- gen(long, f, betaL, sigma2)
# random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
#               random = reStruct(~1|subj, pdClass = 'pdDiag'))
random <- lme(fixed = Y ~ I(long$xj - long$x1), method = 'REML',
random = reStruct(~1|long$subj, pdClass = 'pdDiag'))
return(random$coefficients$fixed[2])
}
randomRep(long)
head(long)
randomRep <- function() {
Y <- gen(long, f, betaL, sigma2)
# random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
#               random = reStruct(~1|subj, pdClass = 'pdDiag'))
random <- lme(fixed = Y ~ I(long[,3] - long[,2]), method = 'REML',
random = reStruct(~1|long[,1], pdClass = 'pdDiag'))
return(random$coefficients$fixed[2])
}
randomRep()
randomRep <- function(long) {
Y <- gen(long, f, betaL, sigma2)
xj <- long$xj
x1 <- long$x1
subj <- long$subj
# random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
#               random = reStruct(~1|subj, pdClass = 'pdDiag'))
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML',
random = reStruct(~1|subj, pdClass = 'pdDiag'))
# random <- lme(fixed = Y ~ I(long[,3] - long[,2]), method = 'REML',
#               random = reStruct(~1|long[,1], pdClass = 'pdDiag'))
return(random$coefficients$fixed[2])
}
randomRep(long)
randomRep(long)
randomRep <- function() {
Y <- gen(long, f, betaL, sigma2)
xj <- long$xj
x1 <- long$x1
subj <- long$subj
# random <- lme(fixed = Y ~ I(xj - x1), method = 'REML', data = long,
#               random = reStruct(~1|subj, pdClass = 'pdDiag'))
random <- lme(fixed = Y ~ I(xj - x1), method = 'REML',
random = reStruct(~1|subj, pdClass = 'pdDiag'))
# random <- lme(fixed = Y ~ I(long[,3] - long[,2]), method = 'REML',
#               random = reStruct(~1|long[,1], pdClass = 'pdDiag'))
return(random$coefficients$fixed[2])
}
randomRep(long)
randomRep()
randomRep()
randomRep()
randomRep()
randomRep()
fixedBetas <- replicate(reps, fixedRep())
randomBetas <- replicate(reps, randomRep())
hist(fixedBetas)
hist(randomBetas)
mean(randomBetas)
sqrt(var(randomBetas))
sqrt(var(fixedBetas))
betaL <- -1
fixedBetas <- replicate(reps, fixedRep())
randomBetas <- replicate(reps, randomRep())
hist(fixedBetas)
mean(fixedBetas)
sqrt(var(fixedBetas))
hist(randomBetas)
mean(randomBetas)
sqrt(var(randomBetas))
qnorm(-60/sqrt(250))
pnorm(-60/sqrt(250))
pnorm(0)
sqrt(250)
pnorm(-4)
pnorm(-4.4)
pnorm(-4.3)
pnorm(-4.2)
2*pnorm(-60/sqrt(250))
2*pnorm(-60.5/sqrt(250))
qnorm(.01)
qnorm(.01)*-24.99
51*49
(qnorm(.01)*-24.99)^2
qnorm(.01)*-sqrt(24.99)^2
(qnorm(.01)*-24.99)^2 * 4
install.packages(
lib  = lib <- .libPaths()[1],
pkgs = as.data.frame(installed.packages(lib), stringsAsFactors=FALSE)$Package,
type = 'source'
)
.libPaths()[1]
lib <- .libPaths()[1]
install.packages(
lib  = lib <- .libPaths()[1],
pkgs = as.data.frame(installed.packages(lib), stringsAsFactors=FALSE)$Package,
type = 'source'
)
x <- c(1294, 2179, 1274, 1264, 1263, 1254, 1251 ,1251 ,1248, 1240,1232,1220,1218,1210)
y<-c(1284,1272,1256,1254,1242,1274,1264,1256,1250)
t <- (mean(x) - mean(y))/(1/(length(x) + length(y) -2) * (sum((x - mean(x))^2) + sum((y - mean(y))^2)))
t
mean(x)
mean(y)
x <- c(1294, 1279, 1274, 1264, 1263, 1254, 1251 ,1251 ,1248, 1240,1232,1220,1218,1210)
t <- (mean(x) - mean(y))/(1/(length(x) + length(y) -2) * (sum((x - mean(x))^2) + sum((y - mean(y))^2)))
t
mean(x)
mean(y)
sp <- (1/(length(x) + length(y) -2) * (sum((x - mean(x))^2) + sum((y - mean(y))^2)))
sp
n <- length(x)
m <- length(y)
t <- (mean(x) - mean(y))/sqrt(sp*(1/n + 1/m))
t
mean(x) - mean(y)
sp
?qt
qt(0.975, n + m -2)
var(x)
((n-1)*var(x) + (n-1)*var(y))/(n + m - 2)
sum((x - mean(x))^2)
var(x)*(n-1)
((n-1)*var(x) + (n-1)*var(y))/(n + m - 2)
sp
(sum((x - mean(x))^2) + sum((y - mean(y))^2))/(length(x) + length(y) - 2)
(sum((x - mean(x))^2) + sum((y - mean(y))^2))/(n + m - 2)
((n-1)*var(x) + (m-1)*var(y))/(n + m - 2)
p1 <- 34/40
p2 <- 19/35
qchisq(0.975, 1)
?qchisq
p <- 53/75
n1 <- 40
n2 <- 35
ls
T <- (p1 -p2)^2 / ((1/n1 + 1/n2) * p * (1 - p))
Tss <- (p1 -p2)^2 / (1/n1 * p1 * (1 - p1) + 1/n2 * p2 * (1 - p2))
T
Tss
pchisq(T, 1)
pchisq(Tss, 1)
1-pchisq(Tss, 1)
1-pchisq(T, 1)
qt(.975, 10)
qnorm(.975)
qt(.975, 1000)
qt(.975, 10000)
qt(.975, 100000)
install.packages('devtools')
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
# Sheridan Grant
# STAT 564 Stan Practice
# Package Handling (you read the comments; I reward you with a shitty pun)
packages <- c('rethinking', 'rstan')
installed <- rownames(installed.packages())
for (i in length(packages)) {
if ((packages[i] %in% installed) == FALSE) {
install.packages(packages[i])
}
}
lapply(packages, require, character.only = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
setwd("C:/Users/Sheridan/Desktop/Code/UW/stat-564/stat-564-2017/stan-practice")
# 2.6
############################################################
globe.qa <- map(
alist(
l ~ dbinom(9, p),
p ~ dunif(0,1)
),
data = list(l = 3)
)
precis(globe.qa)
###########################################################
# Stan
# Bernoulli
water_dat <- list(N = 9,
w = c(1,0,1,1,0,1,1,0,1))
fit <- stan(file = 'rCode2_6alt.stan', data = water_dat,
iter = 100, chains = 1)
# Sheridan Grant
# STAT 564 Stan Practice
# Package Handling (you read the comments; I reward you with a shitty pun)
packages <- c('rethinking', 'rstan')
installed <- rownames(installed.packages())
for (i in length(packages)) {
if ((packages[i] %in% installed) == FALSE) {
install.packages(packages[i])
}
}
lapply(packages, require, character.only = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
setwd("C:/Users/Sheridan/Desktop/Code/UW/stat-564/stat-564-2017/stan-practice")
# 2.6
############################################################
globe.qa <- map(
alist(
l ~ dbinom(9, p),
p ~ dunif(0,1)
),
data = list(l = 3)
)
precis(globe.qa)
###########################################################
# Stan
# Bernoulli
water_dat <- list(N = 9,
l = c(1,0,1,1,0,1,1,0,1))
fit <- stan(file = 'rCode2_6alt.stan', data = water_dat,
iter = 100, chains = 1)
# Sheridan Grant
# STAT 564 Stan Practice
# Package Handling (you read the comments; I reward you with a shitty pun)
packages <- c('rethinking', 'rstan')
installed <- rownames(installed.packages())
for (i in length(packages)) {
if ((packages[i] %in% installed) == FALSE) {
install.packages(packages[i])
}
}
lapply(packages, require, character.only = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
setwd("C:/Users/Sheridan/Desktop/Code/UW/stat-564/stat-564-2017/stan-practice")
# 2.6
############################################################
globe.qa <- map(
alist(
l ~ dbinom(9, p),
p ~ dunif(0,1)
),
data = list(l = 3)
)
precis(globe.qa)
###########################################################
# Stan
# Bernoulli
water_dat <- list(N = 9,
l = c(1,0,1,1,0,1,1,0,1))
fit <- stan(file = 'rCode2_6.stan', data = water_dat,
iter = 100, chains = 1)
# Binomial
water_dat_alt <- list(N = 9,
l = 3)
fit_alt <- stan(file = 'rCode2_6alt.stan', data = water_dat_alt,
iter = 1000, chains = 4)
fit_alt
